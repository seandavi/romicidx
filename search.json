[{"path":"https://seandavi.github.io/romicidx/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 omicidx authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://seandavi.github.io/romicidx/articles/omicidx.html","id":"establishing-a-connection","dir":"Articles","previous_headings":"","what":"Establishing a Connection","title":"Getting Started","text":"connect OmicIDX DuckDB database, use omicidx_duckdb_connection() function: Note function sets read-connection remote DuckDB database hosted remotely. database doesn’t actually contain data. Instead contains links data stored parquet files cloud storage.","code":"con <- omicidx_duckdb_connection() con #> <duckdb_connection 27440 driver=<duckdb_driver dbdir=':memory:' read_only=FALSE bigint=numeric>>"},{"path":"https://seandavi.github.io/romicidx/articles/omicidx.html","id":"listing-tables","dir":"Articles","previous_headings":"","what":"Listing Tables","title":"Getting Started","text":"connected, can list available tables database:","code":"tables <- DBI::dbListTables(con) print(tables) #> [1] \"gpl\"              \"gse\"              \"gsm\"              \"ncbi_bioprojects\" #> [5] \"ncbi_biosamples\"  \"sra_experiments\"  \"sra_runs\"         \"sra_samples\"      #> [9] \"sra_studies\""},{"path":"https://seandavi.github.io/romicidx/articles/omicidx.html","id":"querying-data","dir":"Articles","previous_headings":"","what":"Querying Data","title":"Getting Started","text":"table database can queried using standard SQL. example, retrieve first 10 rows sra_runs table:","code":"res <- DBI::dbGetQuery(con, \"SELECT * FROM sra_runs LIMIT 10\") print(res) #>     accession                                        alias experiment_accession #> 1  SRR4652455 P0028_MT_I2722_TTCATACG_L001_R1_001.fastq.gz           SRX2310319 #> 2  SRR4661781             FSL_E2-0214_R1.trimmedP.fastq.gz           SRX2310320 #> 3  SRR4661782             FSL_K6-1142_R2.trimmedP.fastq.gz           SRX2310321 #> 4  SRR4661783             FSL_K6-1030_R2.trimmedP.fastq.gz           SRX2310322 #> 5  SRR4661784             FSL_H8-0481_R1.trimmedP.fastq.gz           SRX2310323 #> 6  SRR4661785             FSL_H7-0909_R1.trimmedP.fastq.gz           SRX2310324 #> 7  SRR4661786             FSL_H7-0676_R1.trimmedP.fastq.gz           SRX2310325 #> 8  SRR4661787             FSL_F4-0079_R2.trimmedP.fastq.gz           SRX2310326 #> 9  SRR4661788             FSL_H8-0063_R1.trimmedP.fastq.gz           SRX2310327 #> 10 SRR4661789             FSL_H8-0534_R2.trimmedP.fastq.gz           SRX2310328 #>                                                     identifiers qualities #> 1  P0028_MT_I2722_TTCATACG_L001_R1_001.fastq.gz, SUB2043882, NA           #> 2              FSL_E2-0214_R1.trimmedP.fastq.gz, SUB2043904, NA           #> 3              FSL_K6-1142_R2.trimmedP.fastq.gz, SUB2043904, NA           #> 4              FSL_K6-1030_R2.trimmedP.fastq.gz, SUB2043904, NA           #> 5              FSL_H8-0481_R1.trimmedP.fastq.gz, SUB2043904, NA           #> 6              FSL_H7-0909_R1.trimmedP.fastq.gz, SUB2043904, NA           #> 7              FSL_H7-0676_R1.trimmedP.fastq.gz, SUB2043904, NA           #> 8              FSL_F4-0079_R2.trimmedP.fastq.gz, SUB2043904, NA           #> 9              FSL_H8-0063_R1.trimmedP.fastq.gz, SUB2043904, NA           #> 10             FSL_H8-0534_R2.trimmedP.fastq.gz, SUB2043904, NA           #>    center_name title run_center run_date attributes broker_name},{"path":"https://seandavi.github.io/romicidx/articles/omicidx.html","id":"usage-with-dplyr","dir":"Articles","previous_headings":"","what":"Usage with dplyr","title":"Getting Started","text":"connection can also used dplyr package convenient data manipulation. example, get first 10 entries sra_studies table: can complex queries well, grouping, counting, arranging data. example, count number studies study type:","code":"library(dplyr) sra_studies_tbl <- tbl(con, \"sra_studies\") result <-    sra_studies_tbl |>   head(10) |>   collect() print(result) studies_by_type <-   sra_studies_tbl |>   group_by(study_type) |>   count() |>   arrange(desc(n)) |>   head(20) |>   collect() print(studies_by_type)"},{"path":"https://seandavi.github.io/romicidx/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sean Davis. Author, maintainer.","code":""},{"path":"https://seandavi.github.io/romicidx/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Davis S (2025). omicidx: Relational database access public omics metadata. R package version 0.1.0, https://seandavi.github.io/romicidx/.","code":"@Manual{,   title = {omicidx: Relational database access to public omics metadata},   author = {Sean Davis},   year = {2025},   note = {R package version 0.1.0},   url = {https://seandavi.github.io/romicidx/}, }"},{"path":"https://seandavi.github.io/romicidx/reference/get_omicidx_duckdb_location.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the location of the OmicIDX DuckDB database file. — get_omicidx_duckdb_location","title":"Get the location of the OmicIDX DuckDB database file. — get_omicidx_duckdb_location","text":"function returns URL OmicIDX DuckDB database file. can use URL access database directly purposes.","code":""},{"path":"https://seandavi.github.io/romicidx/reference/get_omicidx_duckdb_location.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the location of the OmicIDX DuckDB database file. — get_omicidx_duckdb_location","text":"","code":"get_omicidx_duckdb_location()"},{"path":"https://seandavi.github.io/romicidx/reference/get_omicidx_duckdb_location.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the location of the OmicIDX DuckDB database file. — get_omicidx_duckdb_location","text":"string representing URL OmicIDX DuckDB database file.","code":""},{"path":"https://seandavi.github.io/romicidx/reference/get_omicidx_duckdb_location.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the location of the OmicIDX DuckDB database file. — get_omicidx_duckdb_location","text":"","code":"url <- get_omicidx_duckdb_location() print(url) #> [1] \"https://store.cancerdatasci.org/omicidx/omicidx.duckdb\""},{"path":"https://seandavi.github.io/romicidx/reference/omicidx_duckdb_connection.html","id":null,"dir":"Reference","previous_headings":"","what":"Establish a read-only connection to the OmicIDX DuckDB database. — omicidx_duckdb_connection","title":"Establish a read-only connection to the OmicIDX DuckDB database. — omicidx_duckdb_connection","text":"omicidx DuckDB database hosted remotely accessed via httpfs extension. function sets connection database querying. connection normal DuckDB connection, database file read-.","code":""},{"path":"https://seandavi.github.io/romicidx/reference/omicidx_duckdb_connection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Establish a read-only connection to the OmicIDX DuckDB database. — omicidx_duckdb_connection","text":"","code":"omicidx_duckdb_connection()"},{"path":"https://seandavi.github.io/romicidx/reference/omicidx_duckdb_connection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Establish a read-only connection to the OmicIDX DuckDB database. — omicidx_duckdb_connection","text":"DBI connection object OmicIDX DuckDB database.","code":""},{"path":"https://seandavi.github.io/romicidx/reference/omicidx_duckdb_connection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Establish a read-only connection to the OmicIDX DuckDB database. — omicidx_duckdb_connection","text":"","code":"if (FALSE) { # \\dontrun{ con <- omicidx_duckdb_connection() DBI::dbListTables(con) # Example query res <- DBI::dbGetQuery(con, \"SELECT * FROM sra_runs LIMIT 10\") print(res) } # }"}]
