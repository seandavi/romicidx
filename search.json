[{"path":"https://seandavi.github.io/romicidx/CLAUDE.html","id":null,"dir":"","previous_headings":"","what":"CLAUDE.md","title":"CLAUDE.md","text":"file provides guidance Claude Code (claude.ai/code) working code repository.","code":""},{"path":"https://seandavi.github.io/romicidx/CLAUDE.html","id":"project-overview","dir":"","previous_headings":"","what":"Project Overview","title":"CLAUDE.md","text":"omicidx R package provides relational database (SQL, dbplyr) access public omics metadata including SRA, GEO, BioSample, BioProject. underlying data scraped daily sources stored parquet files cloud storage. package connects remote read-DuckDB database hosted https://store.cancerdatasci.org/omicidx/omicidx.duckdb using httpfs extension. database contains links parquet files rather direct data storage.","code":""},{"path":[]},{"path":"https://seandavi.github.io/romicidx/CLAUDE.html","id":"documentation","dir":"","previous_headings":"Package Development Commands","what":"Documentation","title":"CLAUDE.md","text":"Build documentation: Rscript -e \"roxygen2::roxygenize()\" Build pkgdown site: Rscript -e \"pkgdown::build_site()\"","code":""},{"path":"https://seandavi.github.io/romicidx/CLAUDE.html","id":"package-building","dir":"","previous_headings":"Package Development Commands","what":"Package Building","title":"CLAUDE.md","text":"Check package: R CMD check . Install package locally: Rscript -e \"devtools::install()\" Load package development: Rscript -e \"devtools::load_all()\"","code":""},{"path":"https://seandavi.github.io/romicidx/CLAUDE.html","id":"vignettes","dir":"","previous_headings":"Package Development Commands","what":"Vignettes","title":"CLAUDE.md","text":"Build vignettes: Rscript -e \"devtools::build_vignettes()\" Vignettes use Quarto engine (specified DESCRIPTION VignetteBuilder)","code":""},{"path":[]},{"path":"https://seandavi.github.io/romicidx/CLAUDE.html","id":"core-functions-rduckdb_connectionr","dir":"","previous_headings":"Architecture","what":"Core Functions (R/duckdb_connection.R)","title":"CLAUDE.md","text":"package simple architecture two main exported functions: get_omicidx_duckdb_location() - Returns URL remote DuckDB database file Creating local DuckDB connection Installing loading httpfs extension Attaching remote database ATTACH DATABASE Setting active database USE","code":""},{"path":"https://seandavi.github.io/romicidx/CLAUDE.html","id":"database-connection-pattern","dir":"","previous_headings":"Architecture","what":"Database Connection Pattern","title":"CLAUDE.md","text":"connection pattern unique: creates local DuckDB instance, attaches remote read-database via httpfs. Users can query remote data using standard DBI dplyr operations, actual data files (parquet) fetched cloud storage demand.","code":""},{"path":"https://seandavi.github.io/romicidx/CLAUDE.html","id":"available-tables","dir":"","previous_headings":"Architecture","what":"Available Tables","title":"CLAUDE.md","text":"database contains tables including: - sra_runs - sra_studies - omics metadata tables (exact list available via DBI::dbListTables(con))","code":""},{"path":"https://seandavi.github.io/romicidx/CLAUDE.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"CLAUDE.md","text":"Core dependencies (DESCRIPTION): - DBI - database interface - duckdb - DuckDB R client - dplyr - data manipulation package requires httpfs extension DuckDB access remote database files HTTP/HTTPS.","code":""},{"path":"https://seandavi.github.io/romicidx/CLAUDE.html","id":"documentation-site","dir":"","previous_headings":"","what":"Documentation Site","title":"CLAUDE.md","text":"package uses pkgdown documentation site generation, deployed GitHub Pages via GitHub Actions push main branch. workflow includes Quarto setup rendering vignettes.","code":""},{"path":"https://seandavi.github.io/romicidx/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 omicidx authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://seandavi.github.io/romicidx/articles/omicidx.html","id":"establishing-a-connection","dir":"Articles","previous_headings":"","what":"Establishing a Connection","title":"Getting Started","text":"connect OmicIDX DuckDB database, use omicidx_duckdb_connection() function: Note function sets read-connection remote DuckDB database hosted remotely. database doesn’t actually contain data. Instead contains links data stored parquet files cloud storage.","code":"con <- omicidx_duckdb_connection() con #> <duckdb_connection 54a50 driver=<duckdb_driver dbdir=':memory:' read_only=FALSE bigint=numeric>>"},{"path":"https://seandavi.github.io/romicidx/articles/omicidx.html","id":"listing-tables","dir":"Articles","previous_headings":"","what":"Listing Tables","title":"Getting Started","text":"connected, can list available tables database:","code":"tables <- DBI::dbListTables(con) print(tables) #>  [1] \"_catalog\"             \"ncbi_biosamples\"      \"sra_experiments\"      #>  [4] \"sra_metadata\"         \"sra_runs\"             \"sra_samples\"          #>  [7] \"sra_studies\"          \"stg_geo_platforms\"    \"stg_geo_samples\"      #> [10] \"stg_geo_series\"       \"stg_ncbi_bioprojects\" \"stg_ncbi_biosamples\"  #> [13] \"stg_sra_accessions\"   \"stg_sra_experiments\"  \"stg_sra_runs\"         #> [16] \"stg_sra_samples\"      \"stg_sra_studies\""},{"path":"https://seandavi.github.io/romicidx/articles/omicidx.html","id":"querying-data","dir":"Articles","previous_headings":"","what":"Querying Data","title":"Getting Started","text":"table database can queried using standard SQL. example, retrieve first 10 rows sra_runs table:","code":"res <- DBI::dbGetQuery(con, \"SELECT * FROM staging.stg_sra_runs LIMIT 10\") print(res) #>     accession experiment_accession title run_center run_date center_name #> 1  SRR4652455           SRX2310319  <NA>       <NA>     <NA>        <NA> #> 2  SRR4661781           SRX2310320  <NA>       <NA>     <NA>        <NA> #> 3  SRR4661782           SRX2310321  <NA>       <NA>     <NA>        <NA> #> 4  SRR4661783           SRX2310322  <NA>       <NA>     <NA>        <NA> #> 5  SRR4661784           SRX2310323  <NA>       <NA>     <NA>        <NA> #> 6  SRR4661785           SRX2310324  <NA>       <NA>     <NA>        <NA> #> 7  SRR4661786           SRX2310325  <NA>       <NA>     <NA>        <NA> #> 8  SRR4661787           SRX2310326  <NA>       <NA>     <NA>        <NA> #> 9  SRR4661788           SRX2310327  <NA>       <NA>     <NA>        <NA> #> 10 SRR4661789           SRX2310328  <NA>       <NA>     <NA>        <NA> #>    broker_name                                        alias  GEO #> 1         <NA> P0028_MT_I2722_TTCATACG_L001_R1_001.fastq.gz <NA> #> 2         <NA>             FSL_E2-0214_R1.trimmedP.fastq.gz <NA> #> 3         <NA>             FSL_K6-1142_R2.trimmedP.fastq.gz <NA> #> 4         <NA>             FSL_K6-1030_R2.trimmedP.fastq.gz <NA> #> 5         <NA>             FSL_H8-0481_R1.trimmedP.fastq.gz <NA> #> 6         <NA>             FSL_H7-0909_R1.trimmedP.fastq.gz <NA> #> 7         <NA>             FSL_H7-0676_R1.trimmedP.fastq.gz <NA> #> 8         <NA>             FSL_F4-0079_R2.trimmedP.fastq.gz <NA> #> 9         <NA>             FSL_H8-0063_R1.trimmedP.fastq.gz <NA> #> 10        <NA>             FSL_H8-0534_R2.trimmedP.fastq.gz <NA> #>                                                     identifiers attributes #> 1  P0028_MT_I2722_TTCATACG_L001_R1_001.fastq.gz, SUB2043882, NA       NULL #> 2              FSL_E2-0214_R1.trimmedP.fastq.gz, SUB2043904, NA       NULL #> 3              FSL_K6-1142_R2.trimmedP.fastq.gz, SUB2043904, NA       NULL #> 4              FSL_K6-1030_R2.trimmedP.fastq.gz, SUB2043904, NA       NULL #> 5              FSL_H8-0481_R1.trimmedP.fastq.gz, SUB2043904, NA       NULL #> 6              FSL_H7-0909_R1.trimmedP.fastq.gz, SUB2043904, NA       NULL #> 7              FSL_H7-0676_R1.trimmedP.fastq.gz, SUB2043904, NA       NULL #> 8              FSL_F4-0079_R2.trimmedP.fastq.gz, SUB2043904, NA       NULL #> 9              FSL_H8-0063_R1.trimmedP.fastq.gz, SUB2043904, NA       NULL #> 10             FSL_H8-0534_R2.trimmedP.fastq.gz, SUB2043904, NA       NULL #>    qualities has_complete_run_info          _loaded_at #> 1                            FALSE 2025-10-30 23:06:34 #> 2                            FALSE 2025-10-30 23:06:34 #> 3                            FALSE 2025-10-30 23:06:34 #> 4                            FALSE 2025-10-30 23:06:34 #> 5                            FALSE 2025-10-30 23:06:34 #> 6                            FALSE 2025-10-30 23:06:34 #> 7                            FALSE 2025-10-30 23:06:34 #> 8                            FALSE 2025-10-30 23:06:34 #> 9                            FALSE 2025-10-30 23:06:34 #> 10                           FALSE 2025-10-30 23:06:34"},{"path":"https://seandavi.github.io/romicidx/articles/omicidx.html","id":"usage-with-dplyr","dir":"Articles","previous_headings":"","what":"Usage with dplyr","title":"Getting Started","text":"connection can also used dplyr package convenient data manipulation. example, get first 10 entries sra_studies table: can complex queries well, grouping, counting, arranging data. example, count number studies study type:","code":"library(dplyr) sra_studies_tbl <- tbl(con, \"staging.stg_sra_studies\") result <-    sra_studies_tbl |>   head(10) |>   collect() print(result) #> # A tibble: 10 × 17 #>    accession study_accession title   description abstract study_type center_name #>    <chr>     <chr>           <chr>   <chr>       <chr>    <chr>      <chr>       #>  1 SRP009395 SRP009395       Subtro… <NA>        The sco… Metagenom… Biodiversi… #>  2 SRP009396 SRP009396       Identi… <NA>        The aim… Other      GEO         #>  3 SRP009397 SRP009397       Entamo… <NA>        Parasit… Whole Gen… JCVI        #>  4 SRP009399 SRP009399       Genome… <NA>        Backgro… Whole Gen… Umass Medi… #>  5 SRP009401 SRP009401       Transc… <NA>        Sacchar… Transcrip… GEO         #>  6 ERP001015 ERP001015       Antarc… Pyrosequen… The ext… Metagenom… ICTAR       #>  7 SRP009402 SRP009402       Charac… <NA>        The pre… Transcrip… Graduate U… #>  8 SRP009404 SRP009404       Transc… <NA>        To unde… Transcrip… Shanghai O… #>  9 SRP009407 SRP009407       Cheese… <NA>        Grana T… Metagenom… IASMA rese… #> 10 SRP009408 SRP009408       MicroR… <NA>        Backgro… Transcrip… GEO         #> # ℹ 10 more variables: broker_name <chr>, alias <chr>, BioProject <chr>, #> #   GEO <chr>, pubmed_ids <list>, has_complete_metadata <lgl>, #> #   attributes <list>, identifiers <list>, xrefs <list>, `_loaded_at` <dttm> studies_by_type <-   sra_studies_tbl |>   group_by(study_type) |>   count() |>   arrange(desc(n)) |>   head(20) |>   collect() print(studies_by_type) #> # A tibble: 12 × 2 #> # Groups:   study_type [12] #>    study_type                      n #>    <chr>                       <dbl> #>  1 \"Other\"                    364910 #>  2 \"Whole Genome Sequencing\"  119980 #>  3 \"Transcriptome Analysis\"   112895 #>  4 \"Metagenomics\"              64548 #>  5 \"Population Genomics\"         835 #>  6 \"Epigenetics\"                 702 #>  7 \"Cancer Genomics\"             429 #>  8 \"Exome Sequencing\"            372 #>  9 \"Pooled Clone Sequencing\"      31 #> 10 \"Synthetic Genomics\"           12 #> 11 \"Transcriptome Sequencing\"      2 #> 12 \"Whole Genome Sequencing \"      1"},{"path":"https://seandavi.github.io/romicidx/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sean Davis. Author, maintainer.","code":""},{"path":"https://seandavi.github.io/romicidx/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Davis S (2025). omicidx: Relational database access public omics metadata. R package version 0.2.0, https://seandavi.github.io/romicidx/.","code":"@Manual{,   title = {omicidx: Relational database access to public omics metadata},   author = {Sean Davis},   year = {2025},   note = {R package version 0.2.0},   url = {https://seandavi.github.io/romicidx/}, }"},{"path":[]},{"path":"https://seandavi.github.io/romicidx/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Relational database access to public omics metadata","text":"omicidx provides relational database (SQL, dbplyr) access public omics metadata including SRA, GEO, BioSample, BioProject. package connects remote DuckDB database containing links daily-updated parquet files stored cloud storage.","code":""},{"path":"https://seandavi.github.io/romicidx/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Relational database access to public omics metadata","text":"can install development version omicidx GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"seandavi/romicidx\")"},{"path":[]},{"path":"https://seandavi.github.io/romicidx/index.html","id":"establishing-a-connection","dir":"","previous_headings":"Usage","what":"Establishing a Connection","title":"Relational database access to public omics metadata","text":"Connect OmicIDX DuckDB database: creates read-connection remote database. database doesn’t contain data directly links parquet files cloud storage.","code":"library(omicidx)  con <- omicidx_duckdb_connection()"},{"path":"https://seandavi.github.io/romicidx/index.html","id":"listing-available-tables","dir":"","previous_headings":"Usage","what":"Listing Available Tables","title":"Relational database access to public omics metadata","text":"","code":"tables <- DBI::dbListTables(con) print(tables)"},{"path":"https://seandavi.github.io/romicidx/index.html","id":"querying-with-sql","dir":"","previous_headings":"Usage","what":"Querying with SQL","title":"Relational database access to public omics metadata","text":"Use standard SQL queries via DBI:","code":"# Get first 10 rows from sra_runs table res <- DBI::dbGetQuery(con, \"SELECT * FROM sra_runs LIMIT 10\") print(res)"},{"path":"https://seandavi.github.io/romicidx/index.html","id":"using-dplyr","dir":"","previous_headings":"Usage","what":"Using dplyr","title":"Relational database access to public omics metadata","text":"connection works seamlessly dplyr data manipulation:","code":"library(dplyr)  # Access a table sra_studies_tbl <- tbl(con, \"sra_studies\")  # Query with dplyr syntax result <- sra_studies_tbl |>   head(10) |>   collect()  # More complex queries studies_by_type <- sra_studies_tbl |>   group_by(study_type) |>   count() |>   arrange(desc(n)) |>   head(20) |>   collect()"},{"path":"https://seandavi.github.io/romicidx/index.html","id":"how-it-works","dir":"","previous_headings":"","what":"How It Works","title":"Relational database access to public omics metadata","text":"package uses DuckDB’s httpfs extension connect remote read-database. query tables, DuckDB fetches necessary parquet files cloud storage demand, providing efficient access large-scale omics metadata without downloading entire datasets.","code":""},{"path":"https://seandavi.github.io/romicidx/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Relational database access to public omics metadata","text":"MIT + file LICENSE","code":""},{"path":"https://seandavi.github.io/romicidx/reference/Omicidx.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 Class for Omicidx Database Interaction — Omicidx","title":"R6 Class for Omicidx Database Interaction — Omicidx","text":"`Omicidx` R6 class provides interface interacting omicidx database.","code":""},{"path":"https://seandavi.github.io/romicidx/reference/Omicidx.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"R6 Class for Omicidx Database Interaction — Omicidx","text":"connection DBI connection object omicidx database. .dplyr_tbls list cache dplyr table objects.","code":""},{"path":[]},{"path":"https://seandavi.github.io/romicidx/reference/Omicidx.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 Class for Omicidx Database Interaction — Omicidx","text":"Omicidx$new() Omicidx$sql() Omicidx$table_names() Omicidx$tbl() Omicidx$clone()","code":""},{"path":"https://seandavi.github.io/romicidx/reference/Omicidx.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 Class for Omicidx Database Interaction — Omicidx","text":"Create new `Omicidx` object","code":""},{"path":"https://seandavi.github.io/romicidx/reference/Omicidx.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Omicidx Database Interaction — Omicidx","text":"","code":"Omicidx$new(con = NULL)"},{"path":"https://seandavi.github.io/romicidx/reference/Omicidx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Omicidx Database Interaction — Omicidx","text":"con optional DBI connection object. NULL, new connection created.","code":""},{"path":"https://seandavi.github.io/romicidx/reference/Omicidx.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Omicidx Database Interaction — Omicidx","text":"new `Omicidx` object.","code":""},{"path":"https://seandavi.github.io/romicidx/reference/Omicidx.html","id":"method-sql-","dir":"Reference","previous_headings":"","what":"Method sql()","title":"R6 Class for Omicidx Database Interaction — Omicidx","text":"Execute SQL query omicidx database.","code":""},{"path":"https://seandavi.github.io/romicidx/reference/Omicidx.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Omicidx Database Interaction — Omicidx","text":"","code":"Omicidx$sql(query)"},{"path":"https://seandavi.github.io/romicidx/reference/Omicidx.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Omicidx Database Interaction — Omicidx","text":"query string containing SQL query execute.","code":""},{"path":"https://seandavi.github.io/romicidx/reference/Omicidx.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Omicidx Database Interaction — Omicidx","text":"data frame containing results query.","code":""},{"path":"https://seandavi.github.io/romicidx/reference/Omicidx.html","id":"method-table-names-","dir":"Reference","previous_headings":"","what":"Method table_names()","title":"R6 Class for Omicidx Database Interaction — Omicidx","text":"List table names omicidx database.","code":""},{"path":"https://seandavi.github.io/romicidx/reference/Omicidx.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Omicidx Database Interaction — Omicidx","text":"","code":"Omicidx$table_names()"},{"path":"https://seandavi.github.io/romicidx/reference/Omicidx.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Omicidx Database Interaction — Omicidx","text":"data frame containing names tables database.","code":""},{"path":"https://seandavi.github.io/romicidx/reference/Omicidx.html","id":"method-tbl-","dir":"Reference","previous_headings":"","what":"Method tbl()","title":"R6 Class for Omicidx Database Interaction — Omicidx","text":"Get dplyr table object specified table omicidx database.","code":""},{"path":"https://seandavi.github.io/romicidx/reference/Omicidx.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Omicidx Database Interaction — Omicidx","text":"","code":"Omicidx$tbl(table_name)"},{"path":"https://seandavi.github.io/romicidx/reference/Omicidx.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Omicidx Database Interaction — Omicidx","text":"table_name string specifying name table.","code":""},{"path":"https://seandavi.github.io/romicidx/reference/Omicidx.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Omicidx Database Interaction — Omicidx","text":"method retrieves dplyr table object specified table name. table previously accessed, return cached version. table_name exist, error raised.","code":""},{"path":"https://seandavi.github.io/romicidx/reference/Omicidx.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Omicidx Database Interaction — Omicidx","text":"dplyr table object specified table.","code":""},{"path":"https://seandavi.github.io/romicidx/reference/Omicidx.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 Class for Omicidx Database Interaction — Omicidx","text":"objects class cloneable method.","code":""},{"path":"https://seandavi.github.io/romicidx/reference/Omicidx.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Omicidx Database Interaction — Omicidx","text":"","code":"Omicidx$clone(deep = FALSE)"},{"path":"https://seandavi.github.io/romicidx/reference/Omicidx.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Omicidx Database Interaction — Omicidx","text":"deep Whether make deep clone.","code":""},{"path":"https://seandavi.github.io/romicidx/reference/get_omicidx_duckdb_location.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the location of the OmicIDX DuckDB database file. — get_omicidx_duckdb_location","title":"Get the location of the OmicIDX DuckDB database file. — get_omicidx_duckdb_location","text":"function returns URL OmicIDX DuckDB database file. can use URL access database directly purposes.","code":""},{"path":"https://seandavi.github.io/romicidx/reference/get_omicidx_duckdb_location.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the location of the OmicIDX DuckDB database file. — get_omicidx_duckdb_location","text":"","code":"get_omicidx_duckdb_location()"},{"path":"https://seandavi.github.io/romicidx/reference/get_omicidx_duckdb_location.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the location of the OmicIDX DuckDB database file. — get_omicidx_duckdb_location","text":"string representing URL OmicIDX DuckDB database file.","code":""},{"path":"https://seandavi.github.io/romicidx/reference/get_omicidx_duckdb_location.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the location of the OmicIDX DuckDB database file. — get_omicidx_duckdb_location","text":"","code":"url <- get_omicidx_duckdb_location() print(url) #> [1] \"https://store.cancerdatasci.org/omicidx/omicidx.duckdb\""},{"path":"https://seandavi.github.io/romicidx/reference/omicidx_db_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"List Database Tables in the omicidx database — omicidx_db_tables","title":"List Database Tables in the omicidx database — omicidx_db_tables","text":"function retrieves list tables connected omicidx database.","code":""},{"path":"https://seandavi.github.io/romicidx/reference/omicidx_db_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Database Tables in the omicidx database — omicidx_db_tables","text":"","code":"omicidx_db_tables(con, schema = NULL)"},{"path":"https://seandavi.github.io/romicidx/reference/omicidx_db_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Database Tables in the omicidx database — omicidx_db_tables","text":"con DBI connection object omicidx database.","code":""},{"path":"https://seandavi.github.io/romicidx/reference/omicidx_db_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Database Tables in the omicidx database — omicidx_db_tables","text":"data frame containing names tables database.","code":""},{"path":"https://seandavi.github.io/romicidx/reference/omicidx_db_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Database Tables in the omicidx database — omicidx_db_tables","text":"","code":"if (FALSE) { # \\dontrun{ con <- omicidx_duckdb_connection() tables <- omicidx_db_tables(con) print(tables) } # }"},{"path":"https://seandavi.github.io/romicidx/reference/omicidx_duckdb_connection.html","id":null,"dir":"Reference","previous_headings":"","what":"Establish a read-only connection to the OmicIDX DuckDB database. — omicidx_duckdb_connection","title":"Establish a read-only connection to the OmicIDX DuckDB database. — omicidx_duckdb_connection","text":"omicidx DuckDB database hosted remotely accessed via httpfs extension. function sets connection database querying. connection normal DuckDB connection, database file read-.","code":""},{"path":"https://seandavi.github.io/romicidx/reference/omicidx_duckdb_connection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Establish a read-only connection to the OmicIDX DuckDB database. — omicidx_duckdb_connection","text":"","code":"omicidx_duckdb_connection()"},{"path":"https://seandavi.github.io/romicidx/reference/omicidx_duckdb_connection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Establish a read-only connection to the OmicIDX DuckDB database. — omicidx_duckdb_connection","text":"DBI connection object OmicIDX DuckDB database.","code":""},{"path":"https://seandavi.github.io/romicidx/reference/omicidx_duckdb_connection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Establish a read-only connection to the OmicIDX DuckDB database. — omicidx_duckdb_connection","text":"","code":"if (FALSE) { # \\dontrun{ con <- omicidx_duckdb_connection() DBI::dbListTables(con) # Example query res <- DBI::dbGetQuery(con, \"SELECT * FROM sra_runs LIMIT 10\") print(res) } # }"}]
